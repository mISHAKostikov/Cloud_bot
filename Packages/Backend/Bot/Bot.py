import asyncio
import logging
from datetime import datetime

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command
from aiogram.utils.chat_action import ChatActionSender

from config import TG_BOT_TOKEN
from db import DataBase

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)
# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=TG_BOT_TOKEN)
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
db = DataBase()
db.clear_db()


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command("ref"))
async def cmd_start(message: types.Message):
    async with ChatActionSender.typing(bot=bot, chat_id=message.from_user.id):
        text = (f'üöÄ –í–æ—Ç —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ: '
                f'https://t.me/testmmn_bot?start={message.from_user.id}_{message.from_user.username}')
    await message.answer(text)


@dp.message(Command('start'))
async def process_start_command(message: types.Message, bot: Bot):
    tg_id = message.from_user.id
    if not db.check_user_in_users(tg_id):
        # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        tg_premium = 0

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–≥ –ø—Ä–µ–º–∏—É–º
        if message.from_user.is_premium:
            tg_premium = 1

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ users
        db.new_user_bd_add(tg_id, tg_premium)
        await message.answer(f'–í—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å')
    elif len(message.text.split()) == 1:
        await message.answer(f'–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã')

    host_tg_id = message.text.split()[-1].split('_')[0]
    host_tg_username = message.text.split()[-1].split('_')[1]
    print(host_tg_id, tg_id)
    if not db.check_user_in_referrals(tg_id) and len(message.text.split()) == 2 and int(host_tg_id) != int(tg_id):
        # –ü–µ—Ä–µ–≤–æ–¥ –¥–∞—Ç—ã –≤ timestamp
        date_obj = datetime.strptime(str(message.date.date()), '%Y-%m-%d')
        invitation_date = date_obj.timestamp()

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è referrals
        db.referrals_user_bd_add(host_tg_id, tg_id, invitation_date)
        await message.answer(f'–í–∞—Å –¥–æ–±–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{host_tg_username}')
    elif int(host_tg_id) == int(tg_id):
        await message.answer(f'–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è')
    elif len(message.text.split()) == 2:
        await message.answer(f'–í–∞—Å —É–∂–µ –¥–æ–±–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')



@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç!")


@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer("–ú–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–∏–Ω–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É")


@dp.message(F.text)
async def echo_with_time(message: types.Message):
    await message.answer("–ù–µ –ø–æ–Ω—è–ª —Ç–µ–±—è... \n–ù–∞–ø–∏—à–∏ /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
